//C++ Abstract Syntax Implementation generated by the BNF Converter.
#include <algorithm>
#include <string>
#include <iostream>
#include <vector>
#include "Absyn.H"

/********************   PDefs    ********************/
PDefs::PDefs(ListDef *p1)
{
  listdef_ = p1;

}

PDefs::PDefs(const PDefs & other)
{
  listdef_ = other.listdef_->clone();

}

PDefs &PDefs::operator=(const PDefs & other)
{
  PDefs tmp(other);
  swap(tmp);
  return *this;
}

void PDefs::swap(PDefs & other)
{
  std::swap(listdef_, other.listdef_);

}

PDefs::~PDefs()
{
  delete(listdef_);

}

void PDefs::accept(Visitor *v)
{
  v->visitPDefs(this);
}

PDefs *PDefs::clone() const
{
  return new PDefs(*this);
}



/********************   DFun    ********************/
DFun::DFun(Type *p1, Id p2, ListArg *p3, ListStm *p4)
{
  type_ = p1;
  id_ = p2;
  listarg_ = p3;
  liststm_ = p4;

}

DFun::DFun(const DFun & other)
{
  type_ = other.type_->clone();
  id_ = other.id_;
  listarg_ = other.listarg_->clone();
  liststm_ = other.liststm_->clone();

}

DFun &DFun::operator=(const DFun & other)
{
  DFun tmp(other);
  swap(tmp);
  return *this;
}

void DFun::swap(DFun & other)
{
  std::swap(type_, other.type_);
  std::swap(id_, other.id_);
  std::swap(listarg_, other.listarg_);
  std::swap(liststm_, other.liststm_);

}

DFun::~DFun()
{
  delete(type_);
  delete(listarg_);
  delete(liststm_);

}

void DFun::accept(Visitor *v)
{
  v->visitDFun(this);
}

DFun *DFun::clone() const
{
  return new DFun(*this);
}



/********************   ADecl    ********************/
ADecl::ADecl(Type *p1, Id p2)
{
  type_ = p1;
  id_ = p2;

}

ADecl::ADecl(const ADecl & other)
{
  type_ = other.type_->clone();
  id_ = other.id_;

}

ADecl &ADecl::operator=(const ADecl & other)
{
  ADecl tmp(other);
  swap(tmp);
  return *this;
}

void ADecl::swap(ADecl & other)
{
  std::swap(type_, other.type_);
  std::swap(id_, other.id_);

}

ADecl::~ADecl()
{
  delete(type_);

}

void ADecl::accept(Visitor *v)
{
  v->visitADecl(this);
}

ADecl *ADecl::clone() const
{
  return new ADecl(*this);
}



/********************   SExp    ********************/
SExp::SExp(Exp *p1)
{
  exp_ = p1;

}

SExp::SExp(const SExp & other)
{
  exp_ = other.exp_->clone();

}

SExp &SExp::operator=(const SExp & other)
{
  SExp tmp(other);
  swap(tmp);
  return *this;
}

void SExp::swap(SExp & other)
{
  std::swap(exp_, other.exp_);

}

SExp::~SExp()
{
  delete(exp_);

}

void SExp::accept(Visitor *v)
{
  v->visitSExp(this);
}

SExp *SExp::clone() const
{
  return new SExp(*this);
}



/********************   SReturn    ********************/
SReturn::SReturn(Exp *p1)
{
  exp_ = p1;

}

SReturn::SReturn(const SReturn & other)
{
  exp_ = other.exp_->clone();

}

SReturn &SReturn::operator=(const SReturn & other)
{
  SReturn tmp(other);
  swap(tmp);
  return *this;
}

void SReturn::swap(SReturn & other)
{
  std::swap(exp_, other.exp_);

}

SReturn::~SReturn()
{
  delete(exp_);

}

void SReturn::accept(Visitor *v)
{
  v->visitSReturn(this);
}

SReturn *SReturn::clone() const
{
  return new SReturn(*this);
}



/********************   SBlock    ********************/
SBlock::SBlock(ListStm *p1)
{
  liststm_ = p1;

}

SBlock::SBlock(const SBlock & other)
{
  liststm_ = other.liststm_->clone();

}

SBlock &SBlock::operator=(const SBlock & other)
{
  SBlock tmp(other);
  swap(tmp);
  return *this;
}

void SBlock::swap(SBlock & other)
{
  std::swap(liststm_, other.liststm_);

}

SBlock::~SBlock()
{
  delete(liststm_);

}

void SBlock::accept(Visitor *v)
{
  v->visitSBlock(this);
}

SBlock *SBlock::clone() const
{
  return new SBlock(*this);
}



/********************   EInt    ********************/
EInt::EInt(Integer p1)
{
  integer_ = p1;

}

EInt::EInt(const EInt & other)
{
  integer_ = other.integer_;

}

EInt &EInt::operator=(const EInt & other)
{
  EInt tmp(other);
  swap(tmp);
  return *this;
}

void EInt::swap(EInt & other)
{
  std::swap(integer_, other.integer_);

}

EInt::~EInt()
{

}

void EInt::accept(Visitor *v)
{
  v->visitEInt(this);
}

EInt *EInt::clone() const
{
  return new EInt(*this);
}



/********************   EDouble    ********************/
EDouble::EDouble(Double p1)
{
  double_ = p1;

}

EDouble::EDouble(const EDouble & other)
{
  double_ = other.double_;

}

EDouble &EDouble::operator=(const EDouble & other)
{
  EDouble tmp(other);
  swap(tmp);
  return *this;
}

void EDouble::swap(EDouble & other)
{
  std::swap(double_, other.double_);

}

EDouble::~EDouble()
{

}

void EDouble::accept(Visitor *v)
{
  v->visitEDouble(this);
}

EDouble *EDouble::clone() const
{
  return new EDouble(*this);
}



/********************   EString    ********************/
EString::EString(String p1)
{
  string_ = p1;

}

EString::EString(const EString & other)
{
  string_ = other.string_;

}

EString &EString::operator=(const EString & other)
{
  EString tmp(other);
  swap(tmp);
  return *this;
}

void EString::swap(EString & other)
{
  std::swap(string_, other.string_);

}

EString::~EString()
{

}

void EString::accept(Visitor *v)
{
  v->visitEString(this);
}

EString *EString::clone() const
{
  return new EString(*this);
}



/********************   EId    ********************/
EId::EId(Id p1)
{
  id_ = p1;

}

EId::EId(const EId & other)
{
  id_ = other.id_;

}

EId &EId::operator=(const EId & other)
{
  EId tmp(other);
  swap(tmp);
  return *this;
}

void EId::swap(EId & other)
{
  std::swap(id_, other.id_);

}

EId::~EId()
{

}

void EId::accept(Visitor *v)
{
  v->visitEId(this);
}

EId *EId::clone() const
{
  return new EId(*this);
}



/********************   Type_bool    ********************/
Type_bool::Type_bool()
{

}

Type_bool::Type_bool(const Type_bool & other)
{

}

Type_bool &Type_bool::operator=(const Type_bool & other)
{
  Type_bool tmp(other);
  swap(tmp);
  return *this;
}

void Type_bool::swap(Type_bool & other)
{

}

Type_bool::~Type_bool()
{

}

void Type_bool::accept(Visitor *v)
{
  v->visitType_bool(this);
}

Type_bool *Type_bool::clone() const
{
  return new Type_bool(*this);
}



/********************   Type_int    ********************/
Type_int::Type_int()
{

}

Type_int::Type_int(const Type_int & other)
{

}

Type_int &Type_int::operator=(const Type_int & other)
{
  Type_int tmp(other);
  swap(tmp);
  return *this;
}

void Type_int::swap(Type_int & other)
{

}

Type_int::~Type_int()
{

}

void Type_int::accept(Visitor *v)
{
  v->visitType_int(this);
}

Type_int *Type_int::clone() const
{
  return new Type_int(*this);
}



/********************   Type_double    ********************/
Type_double::Type_double()
{

}

Type_double::Type_double(const Type_double & other)
{

}

Type_double &Type_double::operator=(const Type_double & other)
{
  Type_double tmp(other);
  swap(tmp);
  return *this;
}

void Type_double::swap(Type_double & other)
{

}

Type_double::~Type_double()
{

}

void Type_double::accept(Visitor *v)
{
  v->visitType_double(this);
}

Type_double *Type_double::clone() const
{
  return new Type_double(*this);
}



/********************   Type_void    ********************/
Type_void::Type_void()
{

}

Type_void::Type_void(const Type_void & other)
{

}

Type_void &Type_void::operator=(const Type_void & other)
{
  Type_void tmp(other);
  swap(tmp);
  return *this;
}

void Type_void::swap(Type_void & other)
{

}

Type_void::~Type_void()
{

}

void Type_void::accept(Visitor *v)
{
  v->visitType_void(this);
}

Type_void *Type_void::clone() const
{
  return new Type_void(*this);
}



/********************   Type_string    ********************/
Type_string::Type_string()
{

}

Type_string::Type_string(const Type_string & other)
{

}

Type_string &Type_string::operator=(const Type_string & other)
{
  Type_string tmp(other);
  swap(tmp);
  return *this;
}

void Type_string::swap(Type_string & other)
{

}

Type_string::~Type_string()
{

}

void Type_string::accept(Visitor *v)
{
  v->visitType_string(this);
}

Type_string *Type_string::clone() const
{
  return new Type_string(*this);
}




/********************   ListDef    ********************/

void ListDef::accept(Visitor *v)
{
  v->visitListDef(this);
}


ListDef *ListDef::clone() const
{
  return new ListDef(*this);
}


/********************   ListArg    ********************/

void ListArg::accept(Visitor *v)
{
  v->visitListArg(this);
}


ListArg *ListArg::clone() const
{
  return new ListArg(*this);
}


/********************   ListStm    ********************/

void ListStm::accept(Visitor *v)
{
  v->visitListStm(this);
}


ListStm *ListStm::clone() const
{
  return new ListStm(*this);
}


/********************   ListExp    ********************/

void ListExp::accept(Visitor *v)
{
  v->visitListExp(this);
}


ListExp *ListExp::clone() const
{
  return new ListExp(*this);
}


/********************   ListId    ********************/

void ListId::accept(Visitor *v)
{
  v->visitListId(this);
}


ListId *ListId::clone() const
{
  return new ListId(*this);
}




