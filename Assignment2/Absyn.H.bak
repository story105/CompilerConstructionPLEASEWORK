#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string Id;


/********************   Forward Declarations    ********************/

class Program;
class Def;
class Arg;
class Stm;
class Exp;
class Type;
class PDefs;
class DFun;
class ADecl;
class SExp;
class SReturn;
class SBlock;
class EInt;
class EDouble;
class EString;
class EId;
class Type_bool;
class Type_int;
class Type_double;
class Type_void;
class Type_string;
class ListDef;
class ListArg;
class ListStm;
class ListExp;
class ListId;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitDef(Def *p) = 0;
  virtual void visitArg(Arg *p) = 0;
  virtual void visitStm(Stm *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitType(Type *p) = 0;
  virtual void visitPDefs(PDefs *p) = 0;
  virtual void visitDFun(DFun *p) = 0;
  virtual void visitADecl(ADecl *p) = 0;
  virtual void visitSExp(SExp *p) = 0;
  virtual void visitSReturn(SReturn *p) = 0;
  virtual void visitSBlock(SBlock *p) = 0;
  virtual void visitEInt(EInt *p) = 0;
  virtual void visitEDouble(EDouble *p) = 0;
  virtual void visitEString(EString *p) = 0;
  virtual void visitEId(EId *p) = 0;
  virtual void visitType_bool(Type_bool *p) = 0;
  virtual void visitType_int(Type_int *p) = 0;
  virtual void visitType_double(Type_double *p) = 0;
  virtual void visitType_void(Type_void *p) = 0;
  virtual void visitType_string(Type_string *p) = 0;
  virtual void visitListDef(ListDef *p) = 0;
  virtual void visitListArg(ListArg *p) = 0;
  virtual void visitListStm(ListStm *p) = 0;
  virtual void visitListExp(ListExp *p) = 0;
  virtual void visitListId(ListId *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitId(Id x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class Def : public Visitable
{
public:
  virtual Def *clone() const = 0;

};

class Arg : public Visitable
{
public:
  virtual Arg *clone() const = 0;

};

class Stm : public Visitable
{
public:
  virtual Stm *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class Type : public Visitable
{
public:
  virtual Type *clone() const = 0;

};



class PDefs : public Program
{
public:
  ListDef *listdef_;

  PDefs(const PDefs &);
  PDefs &operator=(const PDefs &);
  PDefs(ListDef *p1);
  ~PDefs();
  virtual void accept(Visitor *v);
  virtual PDefs *clone() const;
  void swap(PDefs &);
};

class DFun : public Def
{
public:
  Type *type_;
  Id id_;
  ListArg *listarg_;
  ListStm *liststm_;

  DFun(const DFun &);
  DFun &operator=(const DFun &);
  DFun(Type *p1, Id p2, ListArg *p3, ListStm *p4);
  ~DFun();
  virtual void accept(Visitor *v);
  virtual DFun *clone() const;
  void swap(DFun &);
};

class ADecl : public Arg
{
public:
  Type *type_;
  Id id_;

  ADecl(const ADecl &);
  ADecl &operator=(const ADecl &);
  ADecl(Type *p1, Id p2);
  ~ADecl();
  virtual void accept(Visitor *v);
  virtual ADecl *clone() const;
  void swap(ADecl &);
};

class SExp : public Stm
{
public:
  Exp *exp_;

  SExp(const SExp &);
  SExp &operator=(const SExp &);
  SExp(Exp *p1);
  ~SExp();
  virtual void accept(Visitor *v);
  virtual SExp *clone() const;
  void swap(SExp &);
};

class SReturn : public Stm
{
public:
  Exp *exp_;

  SReturn(const SReturn &);
  SReturn &operator=(const SReturn &);
  SReturn(Exp *p1);
  ~SReturn();
  virtual void accept(Visitor *v);
  virtual SReturn *clone() const;
  void swap(SReturn &);
};

class SBlock : public Stm
{
public:
  ListStm *liststm_;

  SBlock(const SBlock &);
  SBlock &operator=(const SBlock &);
  SBlock(ListStm *p1);
  ~SBlock();
  virtual void accept(Visitor *v);
  virtual SBlock *clone() const;
  void swap(SBlock &);
};

class EInt : public Exp
{
public:
  Integer integer_;

  EInt(const EInt &);
  EInt &operator=(const EInt &);
  EInt(Integer p1);
  ~EInt();
  virtual void accept(Visitor *v);
  virtual EInt *clone() const;
  void swap(EInt &);
};

class EDouble : public Exp
{
public:
  Double double_;

  EDouble(const EDouble &);
  EDouble &operator=(const EDouble &);
  EDouble(Double p1);
  ~EDouble();
  virtual void accept(Visitor *v);
  virtual EDouble *clone() const;
  void swap(EDouble &);
};

class EString : public Exp
{
public:
  String string_;

  EString(const EString &);
  EString &operator=(const EString &);
  EString(String p1);
  ~EString();
  virtual void accept(Visitor *v);
  virtual EString *clone() const;
  void swap(EString &);
};

class EId : public Exp
{
public:
  Id id_;

  EId(const EId &);
  EId &operator=(const EId &);
  EId(Id p1);
  ~EId();
  virtual void accept(Visitor *v);
  virtual EId *clone() const;
  void swap(EId &);
};

class Type_bool : public Type
{
public:

  Type_bool(const Type_bool &);
  Type_bool &operator=(const Type_bool &);
  Type_bool();
  ~Type_bool();
  virtual void accept(Visitor *v);
  virtual Type_bool *clone() const;
  void swap(Type_bool &);
};

class Type_int : public Type
{
public:

  Type_int(const Type_int &);
  Type_int &operator=(const Type_int &);
  Type_int();
  ~Type_int();
  virtual void accept(Visitor *v);
  virtual Type_int *clone() const;
  void swap(Type_int &);
};

class Type_double : public Type
{
public:

  Type_double(const Type_double &);
  Type_double &operator=(const Type_double &);
  Type_double();
  ~Type_double();
  virtual void accept(Visitor *v);
  virtual Type_double *clone() const;
  void swap(Type_double &);
};

class Type_void : public Type
{
public:

  Type_void(const Type_void &);
  Type_void &operator=(const Type_void &);
  Type_void();
  ~Type_void();
  virtual void accept(Visitor *v);
  virtual Type_void *clone() const;
  void swap(Type_void &);
};

class Type_string : public Type
{
public:

  Type_string(const Type_string &);
  Type_string &operator=(const Type_string &);
  Type_string();
  ~Type_string();
  virtual void accept(Visitor *v);
  virtual Type_string *clone() const;
  void swap(Type_string &);
};



class ListDef : public Visitable, public std::vector<Def*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDef *clone() const;
};

class ListArg : public Visitable, public std::vector<Arg*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListArg *clone() const;
};

class ListStm : public Visitable, public std::vector<Stm*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStm *clone() const;
};

class ListExp : public Visitable, public std::vector<Exp*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExp *clone() const;
};

class ListId : public Visitable, public std::vector<Id>
{
public:
  virtual void accept(Visitor *v);
  virtual ListId *clone() const;
};



#endif
